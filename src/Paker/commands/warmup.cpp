#include "Paker/commands/warmup.h"
#include "Paker/core/core_services.h"
#include "Paker/cache/cache_warmup.h"
#include "Paker/core/output.h"
#include "Paker/core/utils.h"
#include <iostream>
#include <iomanip>
#include <glog/logging.h>
#include "nlohmann/json.hpp"
#include <filesystem>

using json = nlohmann::json;
namespace fs = std::filesystem;

namespace Paker {

void pm_warmup() {
    try {
        std::cout << "üî• ÂêØÂä®ÁºìÂ≠òÈ¢ÑÁÉ≠..." << std::endl;
        
        auto warmup_service = get_cache_warmup_service();
        if (!warmup_service) {
            std::cout << "‚ùå È¢ÑÁÉ≠ÊúçÂä°Êú™ÂàùÂßãÂåñ" << std::endl;
            return;
        }
        
        // ËÆæÁΩÆËøõÂ∫¶ÂõûË∞É
        warmup_service->set_progress_callback([](const std::string& package, 
                                                const std::string& version, 
                                                size_t current, 
                                                size_t total, 
                                                bool success) {
            std::cout << "[" << current << "/" << total << "] ";
            if (success) {
                std::cout << "‚úÖ ";
            } else {
                std::cout << "‚ùå ";
            }
            std::cout << package << "@" << version << std::endl;
        });
        
        // ÂºÄÂßãÊô∫ËÉΩÈ¢ÑÁÉ≠
        bool success = warmup_service->start_smart_preload();
        
        if (success) {
            std::cout << "üéâ ÁºìÂ≠òÈ¢ÑÁÉ≠ÂÆåÊàêÔºÅ" << std::endl;
            
            // ÊòæÁ§∫ÁªüËÆ°‰ø°ÊÅØ
            auto stats = warmup_service->get_statistics();
            std::cout << "\nüìä È¢ÑÁÉ≠ÁªüËÆ°:" << std::endl;
            std::cout << "  ÊÄªÂåÖÊï∞: " << stats.total_packages << std::endl;
            std::cout << "  ÊàêÂäüÈ¢ÑÁÉ≠: " << stats.preloaded_packages << std::endl;
            std::cout << "  Â§±Ë¥•: " << stats.failed_packages << std::endl;
            std::cout << "  ÊàêÂäüÁéá: " << std::fixed << std::setprecision(1) 
                      << (stats.success_rate * 100) << "%" << std::endl;
            std::cout << "  ÊÄªËÄóÊó∂: " << stats.total_time.count() << "ms" << std::endl;
            std::cout << "  Âπ≥ÂùáËÄóÊó∂: " << stats.average_time_per_package.count() << "ms/ÂåÖ" << std::endl;
        } else {
            std::cout << "‚ùå ÁºìÂ≠òÈ¢ÑÁÉ≠Â§±Ë¥•" << std::endl;
        }
        
    } catch (const std::exception& e) {
        LOG(ERROR) << "Error in pm_warmup: " << e.what();
        std::cout << "‚ùå È¢ÑÁÉ≠ËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ: " << e.what() << std::endl;
    }
}

void pm_warmup_analyze() {
    try {
        std::cout << "üîç ÂàÜÊûêÈ°πÁõÆ‰æùËµñÂíå‰ΩøÁî®Ê®°Âºè..." << std::endl;
        
        auto warmup_service = get_cache_warmup_service();
        if (!warmup_service) {
            std::cout << "‚ùå È¢ÑÁÉ≠ÊúçÂä°Êú™ÂàùÂßãÂåñ" << std::endl;
            return;
        }
        
        // ÂàÜÊûê‰ΩøÁî®Ê®°Âºè
        bool success = warmup_service->analyze_usage_patterns();
        if (!success) {
            std::cout << "‚ö†Ô∏è Êó†Ê≥ïÂàÜÊûêÈ°πÁõÆ‰æùËµñÔºå‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆ" << std::endl;
        }
        
        // Êõ¥Êñ∞ÊµÅË°åÂ∫¶ÂàÜÊï∞
        warmup_service->update_popularity_scores();
        
        // ‰ºòÂåñÈ¢ÑÁÉ≠È°∫Â∫è
        warmup_service->optimize_preload_order();
        
        // ÊòæÁ§∫ÂàÜÊûêÁªìÊûú
        auto packages = warmup_service->get_preload_queue();
        
        std::cout << "\nüìã È¢ÑÁÉ≠ÈòüÂàóÂàÜÊûê:" << std::endl;
        std::cout << "  ÊÄªÂåÖÊï∞: " << packages.size() << std::endl;
        
        // Êåâ‰ºòÂÖàÁ∫ßÂàÜÁªÑÊòæÁ§∫
        std::map<WarmupPriority, std::vector<PackageWarmupInfo>> priority_groups;
        for (const auto& pkg : packages) {
            priority_groups[pkg.priority].push_back(pkg);
        }
        
        const char* priority_names[] = {"ÂÖ≥ÈîÆ", "È´ò", "ÊôÆÈÄö", "‰Ωé", "ÂêéÂè∞"};
        
        for (int i = 0; i < 5; ++i) {
            WarmupPriority priority = static_cast<WarmupPriority>(i);
            if (priority_groups.find(priority) != priority_groups.end()) {
                const auto& group = priority_groups[priority];
                std::cout << "  " << priority_names[i] << "‰ºòÂÖàÁ∫ß (" << group.size() << "‰∏™):" << std::endl;
                
                for (const auto& pkg : group) {
                    std::cout << "    ‚Ä¢ " << pkg.package_name << "@" << pkg.version;
                    if (pkg.is_essential) {
                        std::cout << " [Ê†∏ÂøÉ]";
                    }
                    std::cout << " (ÊµÅË°åÂ∫¶: " << std::fixed << std::setprecision(2) 
                              << pkg.popularity_score << ")" << std::endl;
                }
            }
        }
        
        std::cout << "\n‚úÖ ÂàÜÊûêÂÆåÊàêÔºÅ" << std::endl;
        
    } catch (const std::exception& e) {
        LOG(ERROR) << "Error in pm_warmup_analyze: " << e.what();
        std::cout << "‚ùå ÂàÜÊûêËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ: " << e.what() << std::endl;
    }
}

void pm_warmup_stats() {
    try {
        std::cout << "üìä ÁºìÂ≠òÈ¢ÑÁÉ≠ÁªüËÆ°‰ø°ÊÅØ" << std::endl;
        
        auto warmup_service = get_cache_warmup_service();
        if (!warmup_service) {
            std::cout << "‚ùå È¢ÑÁÉ≠ÊúçÂä°Êú™ÂàùÂßãÂåñ" << std::endl;
            return;
        }
        
        auto stats = warmup_service->get_statistics();
        
        std::cout << "\nüìà ÊÄª‰ΩìÁªüËÆ°:" << std::endl;
        std::cout << "  ÊÄªÂåÖÊï∞: " << stats.total_packages << std::endl;
        std::cout << "  Â∑≤È¢ÑÁÉ≠: " << stats.preloaded_packages << std::endl;
        std::cout << "  Â§±Ë¥•: " << stats.failed_packages << std::endl;
        std::cout << "  Ë∑≥Ëøá: " << stats.skipped_packages << std::endl;
        std::cout << "  ÊàêÂäüÁéá: " << std::fixed << std::setprecision(1) 
                  << (stats.success_rate * 100) << "%" << std::endl;
        
        std::cout << "\n‚è±Ô∏è ÊÄßËÉΩÁªüËÆ°:" << std::endl;
        std::cout << "  ÊÄªËÄóÊó∂: " << stats.total_time.count() << "ms" << std::endl;
        std::cout << "  Âπ≥ÂùáËÄóÊó∂: " << stats.average_time_per_package.count() << "ms/ÂåÖ" << std::endl;
        std::cout << "  È¢ÑÁÉ≠Â§ßÂ∞è: " << (stats.total_size_preloaded / (1024 * 1024)) << " MB" << std::endl;
        
        // ÊòæÁ§∫ÂΩìÂâçËøõÂ∫¶
        if (warmup_service->is_preloading()) {
            std::cout << "\nüîÑ ÂΩìÂâçËøõÂ∫¶:" << std::endl;
            std::cout << "  ËøõÂ∫¶: " << warmup_service->get_current_progress() 
                      << "/" << warmup_service->get_total_progress() << std::endl;
            std::cout << "  ÂÆåÊàêÁéá: " << std::fixed << std::setprecision(1) 
                      << warmup_service->get_progress_percentage() << "%" << std::endl;
        }
        
        // ÊòæÁ§∫Â∑≤È¢ÑÁÉ≠ÁöÑÂåÖ
        auto preloaded = warmup_service->get_preloaded_packages();
        if (!preloaded.empty()) {
            std::cout << "\n‚úÖ Â∑≤È¢ÑÁÉ≠ÁöÑÂåÖ:" << std::endl;
            for (const auto& pkg : preloaded) {
                std::cout << "  ‚Ä¢ " << pkg.package_name << "@" << pkg.version << std::endl;
            }
        }
        
    } catch (const std::exception& e) {
        LOG(ERROR) << "Error in pm_warmup_stats: " << e.what();
        std::cout << "‚ùå Ëé∑ÂèñÁªüËÆ°‰ø°ÊÅØÊó∂ÂèëÁîüÈîôËØØ: " << e.what() << std::endl;
    }
}

void pm_warmup_config() {
    try {
        std::cout << "‚öôÔ∏è ÁºìÂ≠òÈ¢ÑÁÉ≠ÈÖçÁΩÆ" << std::endl;
        
        auto warmup_service = get_cache_warmup_service();
        if (!warmup_service) {
            std::cout << "‚ùå È¢ÑÁÉ≠ÊúçÂä°Êú™ÂàùÂßãÂåñ" << std::endl;
            return;
        }
        
        // ÊòæÁ§∫ÂΩìÂâçÈÖçÁΩÆ
        std::cout << "\nüìã ÂΩìÂâçÈÖçÁΩÆ:" << std::endl;
        std::cout << "  ÊúÄÂ§ßÂπ∂ÂèëÈ¢ÑÁÉ≠Êï∞: " << 4 << std::endl;  // ‰ªéÊúçÂä°Ëé∑Âèñ
        std::cout << "  ÊúÄÂ§ßÈ¢ÑÁÉ≠Â§ßÂ∞è: " << (1024) << " MB" << std::endl;  // ‰ªéÊúçÂä°Ëé∑Âèñ
        std::cout << "  È¢ÑÁÉ≠Ë∂ÖÊó∂: " << 300 << " Áßí" << std::endl;  // ‰ªéÊúçÂä°Ëé∑Âèñ
        
        // ÊòæÁ§∫È¢ÑÁÉ≠ÈòüÂàó
        auto packages = warmup_service->get_preload_queue();
        std::cout << "\nüì¶ È¢ÑÁÉ≠ÈòüÂàó (" << packages.size() << "‰∏™ÂåÖ):" << std::endl;
        
        for (const auto& pkg : packages) {
            std::cout << "  ‚Ä¢ " << pkg.package_name << "@" << pkg.version;
            if (pkg.is_essential) {
                std::cout << " [Ê†∏ÂøÉÂåÖ]";
            }
            std::cout << std::endl;
        }
        
        std::cout << "\nüí° ÊèêÁ§∫: ‰ΩøÁî® 'paker warmup analyze' ÂàÜÊûêÈ°πÁõÆ‰æùËµñ" << std::endl;
        std::cout << "üí° ÊèêÁ§∫: ‰ΩøÁî® 'paker warmup' ÂºÄÂßãÈ¢ÑÁÉ≠" << std::endl;
        
    } catch (const std::exception& e) {
        LOG(ERROR) << "Error in pm_warmup_config: " << e.what();
        std::cout << "‚ùå Ëé∑ÂèñÈÖçÁΩÆ‰ø°ÊÅØÊó∂ÂèëÁîüÈîôËØØ: " << e.what() << std::endl;
    }
}

bool configure_warmup_settings() {
    try {
        std::cout << "‚öôÔ∏è ÈÖçÁΩÆÁºìÂ≠òÈ¢ÑÁÉ≠ËÆæÁΩÆ" << std::endl;
        
        auto warmup_service = get_cache_warmup_service();
        if (!warmup_service) {
            std::cout << "‚ùå È¢ÑÁÉ≠ÊúçÂä°Êú™ÂàùÂßãÂåñ" << std::endl;
            return false;
        }
        
        // ËøôÈáåÂèØ‰ª•ÂÆûÁé∞‰∫§‰∫íÂºèÈÖçÁΩÆ
        // ÊöÇÊó∂‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆ
        std::cout << "‚úÖ ‰ΩøÁî®ÈªòËÆ§È¢ÑÁÉ≠ÈÖçÁΩÆ" << std::endl;
        
        return true;
        
    } catch (const std::exception& e) {
        LOG(ERROR) << "Error in configure_warmup_settings: " << e.what();
        std::cout << "‚ùå ÈÖçÁΩÆËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ: " << e.what() << std::endl;
        return false;
    }
}

bool show_warmup_configuration() {
    try {
        pm_warmup_config();
        return true;
        
    } catch (const std::exception& e) {
        LOG(ERROR) << "Error in show_warmup_configuration: " << e.what();
        return false;
    }
}

bool reset_warmup_configuration() {
    try {
        std::cout << "üîÑ ÈáçÁΩÆÁºìÂ≠òÈ¢ÑÁÉ≠ÈÖçÁΩÆ" << std::endl;
        
        auto warmup_service = get_cache_warmup_service();
        if (!warmup_service) {
            std::cout << "‚ùå È¢ÑÁÉ≠ÊúçÂä°Êú™ÂàùÂßãÂåñ" << std::endl;
            return false;
        }
        
        // ÈáçÁΩÆÈÖçÁΩÆ
        warmup_service->load_default_config();
        
        std::cout << "‚úÖ ÈÖçÁΩÆÂ∑≤ÈáçÁΩÆ‰∏∫ÈªòËÆ§ÂÄº" << std::endl;
        return true;
        
    } catch (const std::exception& e) {
        LOG(ERROR) << "Error in reset_warmup_configuration: " << e.what();
        std::cout << "‚ùå ÈáçÁΩÆËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ: " << e.what() << std::endl;
        return false;
    }
}

bool analyze_project_dependencies() {
    try {
        pm_warmup_analyze();
        return true;
        
    } catch (const std::exception& e) {
        LOG(ERROR) << "Error in analyze_project_dependencies: " << e.what();
        return false;
    }
}

bool generate_warmup_recommendations() {
    try {
        std::cout << "üí° ÁîüÊàêÈ¢ÑÁÉ≠Âª∫ËÆÆ..." << std::endl;
        
        auto warmup_service = get_cache_warmup_service();
        if (!warmup_service) {
            return false;
        }
        
        // ÂàÜÊûêÈ°πÁõÆ‰æùËµñ
        warmup_service->analyze_usage_patterns();
        
        // Êõ¥Êñ∞ÊµÅË°åÂ∫¶ÂàÜÊï∞
        warmup_service->update_popularity_scores();
        
        // ‰ºòÂåñÈ¢ÑÁÉ≠È°∫Â∫è
        warmup_service->optimize_preload_order();
        
        std::cout << "‚úÖ È¢ÑÁÉ≠Âª∫ËÆÆÂ∑≤ÁîüÊàê" << std::endl;
        return true;
        
    } catch (const std::exception& e) {
        LOG(ERROR) << "Error in generate_warmup_recommendations: " << e.what();
        return false;
    }
}

bool optimize_warmup_strategy() {
    try {
        std::cout << "üéØ ‰ºòÂåñÈ¢ÑÁÉ≠Á≠ñÁï•..." << std::endl;
        
        auto warmup_service = get_cache_warmup_service();
        if (!warmup_service) {
            return false;
        }
        
        // ‰ºòÂåñÈ¢ÑÁÉ≠È°∫Â∫è
        warmup_service->optimize_preload_order();
        
        std::cout << "‚úÖ È¢ÑÁÉ≠Á≠ñÁï•Â∑≤‰ºòÂåñ" << std::endl;
        return true;
        
    } catch (const std::exception& e) {
        LOG(ERROR) << "Error in optimize_warmup_strategy: " << e.what();
        return false;
    }
}

} // namespace Paker
